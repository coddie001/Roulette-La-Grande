# -*- coding: utf-8 -*-
"""Roulette La'grande.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VVSDygWD4iALD5o1oJOSOhieqU12md2y
"""

import math
import random
import collections
import time

####################################### Roulette Wheel Circumference

# Roulette wheel properties (radii in meters)
radii = [0.5, 0.7, 0.9]  # example radii in meters
circumferences = [2 * math.pi * r for r in radii]

# Print circumferences of each wheel
print("Circumferences of Roulette Wheels:")
for i, c in enumerate(circumferences):
    print(f"Roulette_Wheel {i+1}: Radius = {radii[i]:.2f} m, Circumference = {c:.2f} m")

####################################### Roulette Velocity

# Constants
ROULETTE_MAX_ANGULAR_SPEED = 20  # rad/s
ROULETTE_INERTIA_PUSH_CONSTANT = 10  # arbitrary constant to relate push force to angular speed
BALL_MAX_ANGULAR_SPEED = 100 # rad/s
BALL_INERTIA_PUSH_CONSTANT = 0.5 # arbitrary constant to relate push force to angular speed
GAME_TIME = 10 # secs
Acceleration_due_to_gravity = 9.81 # m/s2

# Function to calculate angular speed and wheel rotation time
def calculate_angular_speed(push_force, max_speed_1=ROULETTE_MAX_ANGULAR_SPEED, max_speed_2=BALL_MAX_ANGULAR_SPEED):
    ball_force = ball_mass * Acceleration_due_to_gravity
    r_angular_speed = min(push_force / ROULETTE_INERTIA_PUSH_CONSTANT, max_speed_1)
    b_angular_speed = min((push_force * ball_force)/ BALL_INERTIA_PUSH_CONSTANT, max_speed_2)
    return r_angular_speed, b_angular_speed

def calculate_rotating_time(r_angular_speed, b_angular_speed):
    full_rotation = 2 * math.pi
    if r_angular_speed == 0 and b_angular_speed==0:
        return float('inf')  # Avoid division by zero
    r_time = full_rotation / r_angular_speed
    b_time = (full_rotation / b_angular_speed)
    return r_time, b_time


def calculate_rotations(r_angular_speed, b_angular_speed):
  wheel_displ = r_angular_speed * GAME_TIME
  ball_displ = b_angular_speed * GAME_TIME
  wheel_num_r = wheel_displ/(2 * math.pi)
  ball_num_r = ball_displ/(2 * math.pi)
  return wheel_num_r, ball_num_r

def ball_drop_time(choice_ball_type):
    if choice_ball_type == 'Plastic':
        ball_drop_time = random.randint(3, 6)
    elif choice_ball_type == 'Glass':
        ball_drop_time = random.randint(5, 8)
    elif choice_ball_type == 'Metal':
        ball_drop_time = random.randint(7, 10)
    else:
        raise ValueError("Invalid ball type. Choose from 'Plastic', 'Glass', or 'Metal'.")

    return ball_drop_time

######################################### Example push forces dictionary
push_forces = {
    "spin_1": 30,
    "spin_2": 50,
    "spin_3": 70
}

print("Available push forces:")
for index, (key, force) in enumerate(push_forces.items()):
    print(f"{index + 1}. {key} = {force}")


force_values = list(push_forces.values())
print(force_values)

######################################### Ball Properties

# Ball properties
ball_types = ['Plastic', 'Glass', 'Metal']
masses = [0.002, 0.005, 0.007]  # masses in kg

# Create a dictionary mapping ball types to their masses
ball_mass_dict = dict(zip(ball_types, masses))

print(ball_mass_dict)

ball_values = list(ball_mass_dict.values())
print(ball_values)

try:
    choice_roulette_type = float(input("Enter the radius of the wheel: "))
    choice_push_value = int(input("Enter the value of the desired push force: "))
    choice_ball_type = input("Enter the type of the desired ball: ").capitalize()

    # Validate the chosen values
    if choice_roulette_type not in radii:
        raise ValueError("Invalid choice: The entered value is not in the list of available roulettes.")
    if choice_push_value not in force_values:
        raise ValueError("Invalid choice: The entered value is not in the list of available push forces.")
    if choice_ball_type not in ball_mass_dict:
        raise ValueError("Invalid choice: The entered ball type is not in the list of available ball types.")

    roulette_type = choice_roulette_type
    Circumference = 2 * math.pi * roulette_type
    print(f"Radius = {roulette_type:.2f} m, Circumference = {Circumference:.2f} m")

    push_force = choice_push_value
    print(f"\nSelected Push Force: {push_force}")

    ball_mass = ball_mass_dict[choice_ball_type]
    print(f"\nSelected Ball: {choice_ball_type}, Mass: {ball_mass} kg")

    print("\nAngular Speeds and Rotating Times:")
    r_angular_speed, b_angular_speed = calculate_angular_speed(push_force, max_speed_1=ROULETTE_MAX_ANGULAR_SPEED, max_speed_2=BALL_MAX_ANGULAR_SPEED)
    r_time, b_time = calculate_rotating_time(r_angular_speed, b_angular_speed)
    wheel_num_r, ball_num_r = calculate_rotations(r_angular_speed, b_angular_speed)
    ball_drop_time = ball_drop_time(choice_ball_type)
    ball_linear_displacement = ball_num_r * Circumference

    print(f"Push Force = {push_force}, Roulette Angular Speed = {r_angular_speed:.2f} rad/s, Wheel Time = {r_time:.2f} s, Wheel Rotation Count = {wheel_num_r:.2f} rotations")
    print(f"Push Force = {push_force}, Ball Angular Speed = {b_angular_speed:.2f} rad/s, Ball Rad Time = {b_time:.3f} s, Ball Drop Time = {ball_drop_time} s, Ball Rotation Count = {ball_num_r:.2f} rotations, Ball Linear Displacement = {ball_linear_displacement:.2f} m")

except ValueError as e:
    print(f"Error: {e}. Please enter a valid value.")
except Exception as e:
    print(f"Unexpected error: {e}")

################################################################ Game Config ######################################################

roulette_numbers = [
    0.0, 27, 10, 25, 29, 12, 8, 19, 31, 18, 6, 21, 33, 16, 4, 23, 35, 14, 2,
    0, 28, 9, 26, 30, 11, 7, 20, 32, 17, 5, 22, 34, 15, 3, 24, 36, 13, 1
]

r_numbers = (
    0.0, 27, 10, 25, 29, 12, 8, 19, 31, 18, 6, 21, 33, 16, 4, 23, 35, 14, 2,
    0, 28, 9, 26, 30, 11, 7, 20, 32, 17, 5, 22, 34, 15, 3, 24, 36, 13, 1)

print("American Roulette Numbers:", roulette_numbers)

# Number colours

number_colours = ['green', 'red', 'black']  # dtype = list

bet_blocks = {

    "0": [0.0] + list(range(0, 37)),  # block_0: Straight up bet any number

    "1": [(1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35)],  # block_1: Odd numbers

    "2": [(2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36)],  # block_2: Even numbers

    "3": [  # block_3: Double number bets (splits)# Horizontal splits
            (1, 2), (2, 3), (4, 5), (5, 6), (7, 8), (8, 9), (10, 11), (11, 12),
            (13, 14), (14, 15), (16, 17), (17, 18), (19, 20), (20, 21), (22, 23), (23, 24),
            (25, 26), (26, 27), (28, 29), (29, 30), (31, 32), (32, 33), (34, 35), (35, 36),
            # Vertical splits
            (1, 4), (2, 5), (3, 6), (4, 7), (5, 8), (6, 9), (7, 10), (8, 11), (9, 12),
            (10, 13), (11, 14), (12, 15), (13, 16), (14, 17), (15, 18), (16, 19), (17, 20),
            (18, 21), (19, 22), (20, 23), (21, 24), (22, 25), (23, 26), (24, 27), (25, 28),
            (26, 29), (27, 30), (28, 31), (29, 32), (30, 33), (31, 34), (32, 35), (33, 36)
        ],
    "4": [  # block_4: Row bets (street bets)
            (1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12),
            (13, 14, 15), (16, 17, 18), (19, 20, 21), (22, 23, 24),
            (25, 26, 27), (28, 29, 30), (31, 32, 33), (34, 35, 36)
        ],

    "5": [  # block_5: Column bets
            list(range(1, 34, 3)),  # 1st column
            list(range(2, 35, 3)),  # 2nd column
            list(range(3, 36, 3))   # 3rd column
        ],
    "6": [  # block_6: Dozen bets
            list(range(1, 13)),    # 1st dozen
            list(range(13, 25)),   # 2nd dozen
            list(range(25, 37))    # 3rd dozen
        ],

    "7": [  # block_7: Red numbers
            (1, 3, 5, 7, 9, 12, 14, 16, 18, 19, 21, 23, 25, 27, 30, 32, 34, 36)
        ],

    "8": [  # block_8: Black numbers
            (2, 4, 6, 8, 10, 11, 13, 15, 17, 20, 22, 24, 26, 28, 29, 31, 33, 35)
        ],
    "9": [(0, 0.0)],  # block_9: Green numbers (0 and 00)

    "10": [  # block_10: Edge bets involving 0
            (0, 1, 2), (0.0, 2, 3), (0, 2, 0.0)
        ],
    "11": [  # block_11: Four number bets (corner bets)
            (1, 2, 4, 5), (2, 3, 5, 6), (4, 5, 7, 8), (5, 6, 8, 9),
            (7, 8, 10, 11), (8, 9, 11, 12), (10, 11, 13, 14), (11, 12, 14, 15),
            (13, 14, 16, 17), (14, 15, 17, 18), (16, 17, 19, 20), (17, 18, 20, 21),
            (19, 20, 22, 23), (20, 21, 23, 24), (22, 23, 25, 26), (23, 24, 26, 27),
            (25, 26, 28, 29), (26, 27, 29, 30), (28, 29, 31, 32), (29, 30, 32, 33),
            (31, 32, 34, 35), (32, 33, 35, 36)
        ],
    "12": [(0, 0.0, 1, 2, 3)],  # block_12: Five number bet

    "13": [  # block_13: Six number bets
            (1, 2, 3, 4, 5, 6), (4, 5, 6, 7, 8, 9), (7, 8, 9, 10, 11, 12),
            (10, 11, 12, 13, 14, 15), (13, 14, 15, 16, 17, 18),
            (16, 17, 18, 19, 20, 21), (19, 20, 21, 22, 23, 24),
            (22, 23, 24, 25, 26, 27), (25, 26, 27, 28, 29, 30),
            (28, 29, 30, 31, 32, 33), (31, 32, 33, 34, 35, 36)
        ],

    "14": list(range(1, 19)),  # block_14: 1-18 numbers

    "15": list(range(19, 37))  # block_15: 19-36 numbers
}

################################################################ Odds

# Number odds for different blocks
block_odds = {
    'single_number_bet': 1/38,  # Straight up bet, pays 35 to 1
    'double_number_bet': 1/19,  # Split bet, pays 17 to 1
    'three_number_bet': 1/12,   # Street bet, pays 11 to 1
    'four_number_bet': 1/9,     # Corner bet, pays 8 to 1
    'five_number_bet': 1/7,     # Five-number bet, pays 6 to 1 (specific bet: 0-00-1-2-3)
    'six_number_bet': 1/6,      # Line bet, pays 5 to 1
    'dozens_bet': 1/3,          # Dozen bet, pays 2 to 1
    'column_bet': 1/3,          # Column bet, pays 2 to 1
    'low_numbers_bet': 19/38,   # Numbers 1 to 18, pays even money
    'high_numbers_bet': 19/38,  # Numbers 19 to 36, pays even money
    'odd_numbers_bet': 19/38,   # Odd numbers, pays even money
    'even_numbers_bet': 19/38,  # Even numbers, pays even money
    'red_numbers_bet': 19/38,   # Red numbers, pays even money
    'black_numbers_bet': 19/38, # Black numbers, pays even money
    'edge_bet': 1/12,           # Special three-number bet involving edges (e.g., 0-1-2 or 00-2-3)
}  # dtype = dict

################################################################ Map Function
# block_dict = dict(bet_blocks)
# block_payout = payout.map(block_dict)
################################################################ The Game
try:
    choice_stake_amount = int(input("Enter the value of your stake amount: "))
    choice_bet = input("Enter the bet block: ")
    if choice_bet in ['1', '2', '7', '8', '9']:
        # Use predefined blocks for these bets
        choice_bet_numbers = bet_blocks[choice_bet]

    # Special case for blocks 14 and 15 where user inputs distinct numbers
    elif choice_bet in ['0', '14', '15']:
        # Prompt user for distinct numbers within the range (no tuple here)
        choice_bet_numbers = list(map(int, input(f"Enter the distinct block numbers for {choice_bet}, separated by commas: ").split(',')))

        # Ensure the inputs are within valid ranges for the respective block
        if choice_bet == '14' and not all(1 <= num <= 18 for num in choice_bet_numbers):
            print("Error: Block 14 numbers must be between 1 and 18.")


        elif choice_bet == '15' and not all(19 <= num <= 36 for num in choice_bet_numbers):
            print("Error: Block 15 numbers must be between 19 and 36.")

    # For other bet types that require specific number inputs (user-inputted numbers)
    else:
        choice_bet_numbers = tuple(map(int, input("Enter the block numbers, separated by commas (e.g., 2,5,6): ").split(',')))


    # Validate the chosen values
    if not (0 <= choice_stake_amount <= 1000000):
        raise ValueError("Invalid choice: The entered value is not within the accepted stake range.")

    if choice_bet not in bet_blocks:
        raise ValueError("Invalid choice: The entered value is not in the list of bet blocks.")

    if not all(num in bet_blocks[choice_bet] for num in choice_bet_numbers):
        raise ValueError("Invalid choice: The entered value is not in the list of bettable numbers.")

    print(f"\nSelected Game: Bet Block : {choice_bet} Bet Numbers: {choice_bet_numbers}")

    print(f"Your stake amount ${choice_stake_amount:.2f}")

except ValueError as e:
    print(f"Error: {e}")

################################################################ PayOuts

stake_amount = choice_stake_amount

# Number odds for different blocks
payout = {
    '0': 36,  # Straight up bet, pays 35 to 1
    '3': 18,  # Split bet, pays 17 to 1
    '4': 12,  # Street bet, pays 11 to 1
    '11': 9,  # Corner bet, pays 8 to 1
    '12': 7,  # Five-number bet, pays 6 to 1 (specific bet: 0-00-1-2-3)
    '13': 6,  # Line bet, pays 5 to 1
    '6': 3,   # Dozen bet, pays 2 to 1
    '5': 3,   # Column bet, pays 2 to 1
    '14': 2,  # Numbers 1 to 18, pays even money
    '15': 2,  # Numbers 19 to 36, pays even money
    '1': 2,   # Odd numbers, pays even money
    '2': 2,   # Even numbers, pays even money
    '7': 2,   # Red numbers, pays even money
    '8': 2,   # Black numbers, pays even money
    '9': 36,  # Special case, pays 35 to 1
    '10': 12  # Special three-number bet involving edges
}


################################################################ RNG
def RNG(ball_drop_time, roulette_numbers):
    # Track the start time
    start_time = time.time()

    # Use a deque to allow fast rotations (efficient for circular lists)
    roulette_deque = collections.deque(roulette_numbers)

    # Loop for a duration equal to ball_drop_time
    while time.time() - start_time < ball_drop_time:
        # Simulate a random interval (100-150 milliseconds)
        interval = random.uniform(0.1, 0.15)
        time.sleep(interval)

        # Rotate the deque by a random step
        # steps = random.randint(1, 5)  # Random step size for rotation
        steps = 1
        roulette_deque.rotate(steps)

        # Debug: Print the deque after each rotation
        print(f"After rotation, deque: {list(roulette_deque)}")

    # After time elapses, return the first element (which is treated as the result)
    result = roulette_deque[0]

    # Debug: Print the final deque before returning the result
    print(f"Final deque before return: {list(roulette_deque)}")

    return result

game_result = RNG(ball_drop_time, roulette_numbers)
print(f"Result: {game_result}")

################################################################ Calculate Winnings

# Calculate the payout for the bet block and numbers
# payout = payout[choice_bet]  # Retrieve the payout for the bet block

def place_bet(payout, choice_bet, choice_bet_numbers, game_result, stake_amount):
    # Handle predefined bet blocks ('1', '2', '7', '8', '9')
    if choice_bet in ['1', '2', '7', '8', '9']:
        # Flatten the list of tuples if needed
        flat_bet_numbers = [num for sublist in choice_bet_numbers for num in (sublist if isinstance(sublist, tuple) else [sublist])]

        # Check if the game result is in the flattened list of numbers
        if game_result in flat_bet_numbers:
            multiplier = payout.get(str(choice_bet), 0)  # Get the payout multiplier
            return multiplier * stake_amount  # Calculate and return the winnings

    # Handle user-inputted blocks ('0', '14', '15')
    elif choice_bet in ['0', '14', '15']:
        # Directly check if the game result is in the provided numbers
        if game_result in choice_bet_numbers:
            multiplier = payout.get(str(choice_bet), 0)  # Get the payout multiplier
            return multiplier * stake_amount  # Calculate and return the winnings

    # Return 0 if no match
    return 0

winnings = place_bet(payout, choice_bet, choice_bet_numbers, game_result, stake_amount)
# Output result
if winnings is None:
  winnings = 0
# Output result
if winnings > 0:
  print(f"Congratulations! You won ${winnings:.2f}")
else:
  print("Sorry, you lost this round.")